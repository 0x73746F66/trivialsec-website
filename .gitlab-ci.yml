variables:
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
  TFPLAN: $CI_PIPELINE_ID.tfplan
  PLAN_JSON: tfplan-$CI_PIPELINE_ID.json
  TFSTATE: $CI_PIPELINE_ID.tfstate
  CF_DISTRIBUTION_ID: E32XEUIY96JKX4

cache:
  key: $CI_PIPELINE_ID
  paths:
    - .terraform

stages:
  - plan
  - apply
  - deploy

before_script:
  - terraform --version
  - terraform init plans

plan:validate:
  retry: 2
  tags:
    - python
  stage: plan
  script:
    - terraform validate plans
  only:
    refs:
      - merge_request
      - master

plan:tf:
  retry: 2
  tags:
    - python
  stage: plan
  script:
    - touch $PLAN_JSON
    - shopt -s expand_aliases
    - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
    - terraform plan -detailed-exitcode -no-color -state=$TFSTATE -out=$TFPLAN plans
    - if [ $? -eq 2 ]; then terraform show --json $TFPLAN | convert_report > $PLAN_JSON; fi
  only:
    refs:
      - merge_request
      - master
  artifacts:
    name: plan
    paths:
      - $PLAN_JSON
    reports:
      terraform: $PLAN_JSON

apply:tf:
  retry: 2
  tags:
    - python
  stage: apply
  script:
    - terraform apply -state=$TFSTATE -auto-approve -refresh=true -input=false $TFPLAN
  when: manual
  only:
    refs:
      - master
  needs:
    - plan:tf

deploy:s3:
  retry: 2
  tags:
    - python
  stage: deploy
  script:
    - aws --version
    - make publish
  only:
    refs:
      - master
  needs:
    - apply:tf

deploy:cf:
  retry: 2
  tags:
    - python
  stage: deploy
  script:
    - aws --version
    - make invalidate-cloudfront
  only:
    refs:
      - master
  needs:
    - apply:tf
