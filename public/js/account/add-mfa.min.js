const decoder=new TextDecoder,enc=new TextEncoder,chooseMfa=async event=>{if("choose-mfa"!=event.currentTarget.id)return void toast("warning","This feature is not currently available","Sorry");const mfaTypeArr=Array.from(document.getElementsByName("mfaType")).filter((e=>e.checked)),mfaType=1==mfaTypeArr.length?mfaTypeArr.pop().value:null;return"webauthn"==mfaType?(event.currentTarget.textContent="Retry",document.querySelector(".choose-mfa h1").textContent="Setup U2F",document.querySelector(".choose-mfa h2").classList.add("invisible"),document.querySelector(".ChooseMfa__label.totp").classList.add("invisible"),createWebauthn()):"totp"==mfaType?(event.currentTarget.remove(),document.querySelector(".choose-mfa h1").textContent="Setup TOTP",document.querySelector(".LoginCard__card.choose-mfa").classList.add("hide"),document.querySelector(".LoginCard__card.verify-totp").classList.remove("hide"),document.querySelector("button.verify-code").classList.remove("hide"),generateTotp()):void 0},generateTotp=async()=>{const json=await PublicApi.get({target:"/add-mfa/totp"});if(json.status&&"success"==json.status){toast("info",json.message,"TOTP Setup",!0),document.getElementById("totp-secret-code").textContent=json.totp_code;const image=document.createElement("img");image.src=`data:image/png;base64,${json.qr_code}`,image.id="register-qr",image.classList.add("qr-code"),document.querySelector(".img-wrapper--container").insertAdjacentElement("afterend",image);const registerQREl=document.getElementById("register-qr"),canvas=document.createElement("canvas");canvas.width=image.width,canvas.height=image.height,canvas.getContext("2d").drawImage(image,0,0);const url=canvas.toDataURL("image/png"),triggerDownload=document.getElementById("temporary");return triggerDownload.setAttribute("href",url),triggerDownload.setAttribute("download","QR code.png"),registerQREl.addEventListener("click",triggerDownload.click,!1),registerQREl.addEventListener("touchstart",triggerDownload.click,!!supportsPassive&&{passive:!0}),void(document.getElementById("totp-message").textContent=json.message)}toast(json.status,json.message)},verifyTotp=async()=>{const totp_code=Array.from(document.querySelectorAll(".totp__fieldset input")).map((n=>n.value)).join(""),json=await PublicApi.post({target:"/add-mfa/totp",body:{totp_code:totp_code}});if(toast(json.status,json.message),json.status&&"success"==json.status){const successEl=document.querySelector(".verify-totp .success-checkmark_off");successEl.classList.remove("success-checkmark_off"),successEl.classList.remove("hide"),successEl.classList.add("success-checkmark"),document.getElementById("verify-totp").remove(),document.querySelector(".verify-totp .img-wrapper--container").remove(),document.querySelector(".verify-totp .totp__fieldset").remove(),document.getElementById("register-qr").remove(),document.getElementById("totp-message").remove(),document.getElementById("totp-secret-code").remove(),document.querySelector(".verify-totp h1").textContent=json.message,document.querySelector(".verify-totp .ChooseMfa__parra").textContent=json.description;const alertId=Object.keys(window.toasts).find((key=>window.toasts[key]===document.getElementById("totp-message").textContent));alertId&&document.getElementById(alertId).remove()}},createWebauthn=async()=>{let credential=await navigator.credentials.create({publicKey:{challenge:enc.encode(app.apiKeyId),rp:{name:app.domainName},user:{id:enc.encode(app.accountEmail),name:app.accountEmail,displayName:app.accountEmail},pubKeyCredParams:[{alg:-7,type:"public-key"},{alg:-257,type:"public-key"}],authenticatorSelection:{authenticatorAttachment:"cross-platform",requireResidentKey:!1,userVerification:"discouraged"},timeout:9e4,attestation:"direct"}}).catch(BaseApi.handle_webauthn_error);if(credential&&credential.response){const decodedClientData=decoder.decode(credential.response.clientDataJSON),webauthn_challenge=JSON.parse(decodedClientData).challenge,webauthn_id=arrayBufferToBase64(credential.rawId),clientDataJSON=arrayBufferToBase64(credential.response.clientDataJSON),attestationObject=arrayBufferToBase64(credential.response.attestationObject),dataView=new DataView(new ArrayBuffer(2)),decodedAttestationObj=CBOR.decode(credential.response.attestationObject);decodedAttestationObj.authData.slice(53,55).forEach(((value,index)=>dataView.setUint8(index,value)));const credentialIdLength=dataView.getUint16(),webauthn_public_key=arrayBufferToBase64(decodedAttestationObj.authData.slice(55+credentialIdLength)),json=await PublicApi.post({target:"/add-mfa/webauthn",body:{webauthn_id:webauthn_id,webauthn_public_key:webauthn_public_key,webauthn_challenge:webauthn_challenge,clientDataJSON:clientDataJSON,attestationObject:attestationObject}});if(json.status&&"error"==json.status&&"Unauthorised"==json.message)return void toast("warning",json.error,"Cancelled",!1);if(json.status&&"success"==json.status)return document.querySelector(".LoginCard__card.choose-mfa").hide(),document.querySelector(".LoginCard__card.confirm-webauthn").show(),app.keys=[{webauthn_id:webauthn_id}],verifyWebauthn();toast(json.status,json.message)}},verifyWebauthn=async()=>{if(0===app.keys.length)return void toast("error","No device registered");const credentialId=app.keys[0].webauthn_id,assertion=await navigator.credentials.get({publicKey:{challenge:enc.encode(app.apiKeyId),rpId:app.domainName,userVerification:"discouraged",allowCredentials:[{id:base64ToArrayBuffer(credentialId),type:"public-key",transports:["usb","ble","nfc","internal"]}],timeout:9e4}}).catch(BaseApi.handle_webauthn_error);if(assertion){const response=assertion.response,authData=new Uint8Array(response.authenticatorData),clientDataJSON=new Uint8Array(response.clientDataJSON),rawId=new Uint8Array(assertion.rawId),sig=new Uint8Array(response.signature),assertionClientExtensions=assertion.getClientExtensionResults(),assertion_response={id:assertion.id,rawId:arrayBufferToBase64(rawId),type:assertion.type,authData:arrayBufferToBase64(authData),clientData:arrayBufferToBase64(clientDataJSON),signature:hexEncode(sig),assertionClientExtensions:JSON.stringify(assertionClientExtensions)},json=await PublicApi.post({target:"/add-mfa/webauthn",body:{assertion_response:assertion_response}});if(toast(json.status,json.message),json.status&&"success"==json.status){const successEl=document.querySelector(".confirm-webauthn .success-checkmark_off");successEl.classList.remove("success-checkmark_off"),successEl.classList.remove("hide"),successEl.classList.add("success-checkmark"),document.getElementById("retry-webauthn").remove(),document.querySelector(".Card__card.confirm-webauthn h1").textContent=json.message,document.querySelector(".Card__card.confirm-webauthn h2").textContent=json.description,document.querySelector(".Card__card.confirm-webauthn img").remove(),document.querySelector(".Card__card.confirm-webauthn .ChooseMfa__parra").remove()}}},check_totp_fieldset=async event=>{event.preventDefault();const input=event.currentTarget.value;if(!input)return;const number=parseInt(input,10);if(!number.between(0,9,!0))return void(event.currentTarget.value=Array.from(input).shift());event.currentTarget.value=number;if(6===Array.from(document.querySelectorAll(".totp__fieldset input")).map((n=>n.value)).join("").length){return document.getElementById("verify-totp").setAttribute("disabled",!0),verifyTotp()}event.target.nextElementSibling.focus()},handle_totp_paste=async event=>{event.stopPropagation(),event.preventDefault();const totp_code=(event.clipboardData||window.clipboardData).getData("Text");if(!totp_code)return void toast("warning","The copy/paste did not work, please try to type your recovery code","Sorry");const firstEl=document.querySelectorAll(".totp__fieldset input")[0];if(6===totp_code.length){let thisEl=firstEl;for(const num of Array.from(totp_code)){if(thisEl.value=num,!thisEl.nextElementSibling)break;thisEl=thisEl.nextElementSibling}return document.getElementById("verify-totp").setAttribute("disabled",!0),verifyTotp()}firstEl.focus()};document.addEventListener("DOMContentLoaded",(async()=>{"/account/add-mfa"!=location.pathname&&history.pushState({},document.title,"/account/add-mfa"),"credentials"in navigator||(document.querySelector(".ChooseMfa__label.webauthn").title="Hardware Security Keys are not supported on this browser",document.querySelector(".ChooseMfa__label.webauthn").classList.add("disabled"),document.querySelector(".ChooseMfa__label.webauthn input").disabled=!0,toast("warning","This feature is not currently available for your browser","Sorry"));const chooseMfaEl=document.getElementById("choose-mfa");chooseMfaEl.addEventListener("click",chooseMfa,!1),chooseMfaEl.addEventListener("touchstart",chooseMfa,!!supportsPassive&&{passive:!0});const retryWebauthnEl=document.getElementById("retry-webauthn");retryWebauthnEl.addEventListener("click",verifyWebauthn,!1),retryWebauthnEl.addEventListener("touchstart",verifyWebauthn,!!supportsPassive&&{passive:!0});const verifyTotpEl=document.getElementById("verify-totp");verifyTotpEl.addEventListener("click",verifyTotp,!1),verifyTotpEl.addEventListener("touchstart",verifyTotp,!!supportsPassive&&{passive:!0});for(const el of document.querySelectorAll(".totp__fieldset input"))el.addEventListener("input",check_totp_fieldset,!1),el.addEventListener("paste",handle_totp_paste,!1)}),!1);