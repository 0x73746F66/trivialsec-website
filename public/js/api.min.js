const BaseApi=Object.assign({version:"v1",handle_webauthn_error:async error=>{["InvalidStateError"].includes(error.name)&&error.message.startsWith("A request is already pending")||(["NotAllowedError"].includes(error.name)?toast("warning","The operation either timed out or was cancelled","Cancelled"):toast("error",error.message,error.name,!0))},handle_debug:async error=>{console.error(error)},request:async(url,options)=>{const response=await fetch(url,options).catch(BaseApi.handle_debug);if(!response||404===response.status)return{status:"warning",message:"The server is currently not available.<br>Please try again in a few moments"};if(401===response.status)return{status:"error",message:"Request was cancelled as being unauthorised"};if(200!==response.status)return console.log(response),{status:"info",message:"This feature is not currently available"};const json=await response.json();return json.error&&BaseApi.handle_debug(json.error),json},authorization_transaction:async target=>{const apiKeySecret=localStorage.getItem("_apiKeySecret"),endpoint_authz_body=JSON.stringify({target:target}),json=await BaseApi.request(`${app.apiScheme}${app.apiDomain}/${BaseApi.version}/endpoints/authorization`,{mode:"cors",credentials:"omit",method:"POST",body:endpoint_authz_body,headers:{Authorization:await HMAC.header({credentials:{id:app.apiKeyId,key:apiKeySecret,alg:HMAC.default_algorithm},uri:`/${BaseApi.version}/endpoints/authorization`,body:endpoint_authz_body,method:"POST"})}});if("object"==typeof json){if("transaction_id"in json&&"string"==typeof json.transaction_id)return json.transaction_id;json.status&&json.message&&"success"!==json.status&&toast(json.status,json.message)}return json},prompt_webauthn:async(credentials,target,transaction_id)=>{const assertion=await navigator.credentials.get({publicKey:{challenge:HMAC.enc.encode(app.apiKeyId),rpId:app.domainName,userVerification:"discouraged",allowCredentials:credentials,timeout:9e4}}).catch(BaseApi.handle_webauthn_error);if(assertion&&assertion.response){const apiKeySecret=localStorage.getItem("_apiKeySecret"),authData=new Uint8Array(assertion.response.authenticatorData),clientDataJSON=new Uint8Array(assertion.response.clientDataJSON),rawId=new Uint8Array(assertion.rawId),sig=new Uint8Array(assertion.response.signature),assertionClientExtensions=assertion.getClientExtensionResults(),assertion_response={id:assertion.id,rawId:arrayBufferToBase64(rawId),type:assertion.type,authData:arrayBufferToBase64(authData),clientData:arrayBufferToBase64(clientDataJSON),signature:hexEncode(sig),assertionClientExtensions:JSON.stringify(assertionClientExtensions)},authz_body=JSON.stringify({assertion_response:assertion_response,target:target,transaction_id:transaction_id});return BaseApi.request(`${app.apiScheme}${app.apiDomain}/${BaseApi.version}/authorization`,{mode:"cors",credentials:"omit",method:"POST",body:authz_body,headers:{Authorization:await HMAC.header({credentials:{id:app.apiKeyId,key:apiKeySecret,alg:HMAC.default_algorithm},uri:`/${BaseApi.version}/authorization`,body:authz_body,method:"POST"})}})}},authorization:async(target,transaction_id)=>{const try_webauthn=app.keys.length>=1,try_totp=!!app.mfaId;if(try_webauthn){const allowCredentials=[];for await(const key of app.keys)allowCredentials.push({id:base64ToArrayBuffer(key.webauthn_id),type:"public-key",transports:["usb","ble","nfc","internal"]});const prompt_resp=await BaseApi.prompt_webauthn(allowCredentials,target,transaction_id);return"object"==typeof prompt_resp&&"authorization_token"in prompt_resp&&"string"==typeof prompt_resp.authorization_token?prompt_resp.authorization_token:prompt_resp}if(try_totp){const authorization_token=sessionStorage.getItem(`_totp_${target}`);if(authorization_token)return authorization_token;const overlay=document.createElement("div");overlay.classList.add("totp-overlay"),document.body.insertAdjacentElement("afterbegin",overlay),document.querySelector(".totp-container").classList.add("open");for(const el of document.querySelectorAll(".totp-container .totp__fieldset input"))el.addEventListener("input",BaseApi.check_totp_fieldset,!1),el.addEventListener("paste",BaseApi.handle_totp_paste,!1);const verifyTotpBtn=document.getElementById("verify-totp");return verifyTotpBtn.addEventListener("click",BaseApi.handle_verify_totp,!1),verifyTotpBtn.addEventListener("touchstart",BaseApi.handle_verify_totp,!!supportsPassive&&{passive:!0}),verifyTotpBtn.dataset.transactionId=transaction_id,verifyTotpBtn.dataset.target=target,{status:"info",message:"Enter the 6 digit code generated by your app"}}},handle_verify_totp:async event=>{const totp_code=Array.from(document.querySelectorAll(".totp-container .totp__fieldset input")).map((n=>n.value)).join("");if(6===totp_code.length){const apiKeySecret=localStorage.getItem("_apiKeySecret"),verifyTotpBtn=document.getElementById("verify-totp"),transaction_id=verifyTotpBtn.dataset.transactionId,target=verifyTotpBtn.dataset.target,authz_body=JSON.stringify({totp_code:totp_code,target:target,transaction_id:transaction_id}),json=await BaseApi.request(`${app.apiScheme}${app.apiDomain}/${BaseApi.version}/authorization`,{mode:"cors",credentials:"omit",method:"POST",body:authz_body,headers:{Authorization:await HMAC.header({credentials:{id:app.apiKeyId,key:apiKeySecret,alg:HMAC.default_algorithm},uri:`/${BaseApi.version}/authorization`,body:authz_body,method:"POST"})}});if(json.status&&"success"==json.status){sessionStorage.setItem(`_totp_${target}`,json.authorization_token),document.querySelector(".totp-container .totp-message").remove(),document.querySelector(".totp-container .totp__fieldset").remove(),document.getElementById("verify-totp").remove();const successEl=document.querySelector(".totp-container .success-checkmark_off");successEl.classList.remove("success-checkmark_off"),successEl.classList.remove("hide"),successEl.classList.add("success-checkmark"),verifyTotpBtn.removeEventListener("click",BaseApi.handle_verify_totp,!1),verifyTotpBtn.removeEventListener("touchstart",BaseApi.handle_verify_totp,!!supportsPassive&&{passive:!0}),setTimeout((()=>{document.querySelector(".totp-container").classList.remove("open"),document.querySelector(".totp-overlay").remove(),toast("success","You can now perform elevated privilege actions","Authenticated",!0)}),3e3)}else toast(json.status,json.message)}},handle_totp_paste:async event=>{event.stopPropagation(),event.preventDefault();const totp_code=(event.clipboardData||window.clipboardData).getData("Text");if(!totp_code)return void toast("warning","The copy/paste did not work, please try to type your recovery code","Sorry");const firstEl=document.querySelectorAll(".totp-container .totp__fieldset input")[0];if(6===totp_code.length){let thisEl=firstEl;for(const num of Array.from(totp_code)){if(thisEl.value=num,!thisEl.nextElementSibling)break;thisEl=thisEl.nextElementSibling}document.getElementById("verify-totp").click()}else firstEl.focus()},check_totp_fieldset:async event=>{event.preventDefault();const input=event.currentTarget.value;if(!input)return;const number=parseInt(input,10);if(!number.between(0,9,!0))return void(event.currentTarget.value=Array.from(input).shift());event.currentTarget.value=number;6===Array.from(document.querySelectorAll(".totp-container .totp__fieldset input")).map((n=>n.value)).join("").length&&document.getElementById("verify-totp").click()}}),HMAC=Object.assign({supported_algorithms:["SHA-256","SHA-384","SHA-512"],default_algorithm:"SHA-512",default_content_type:"application/json",default_port:443,default_method:"GET",enc:new TextEncoder,valid_credentials:credentials=>{if(!(credentials&&credentials.id&&credentials.key&&credentials.alg))throw new Error("Invalid credentials")},header:async options=>{const config=Object.assign({credentials:{},uri:void 0,body:"",method:HMAC.default_method,host:app.apiDomain,port:HMAC.default_port,payload_verification:!0,payload:void 0,timestamp:parseInt(Date.now()/1e3,10),nonce:"".random(8)},options);HMAC.valid_credentials(config.credentials),!1!==config.payload_verification&&(config.payload=btoa(config.body));const mac=await HMAC.sign(config);return'HMAC id="'+config.credentials.id+'", ts="'+config.timestamp+'", nonce="'+config.nonce+'", mac="'+mac+'"'},sign:async options=>{const config=Object.assign({credentials:{},uri:void 0,body:"",method:HMAC.default_method,host:app.apiDomain,port:HMAC.default_port,payload_verification:!0,payload:void 0,timestamp:parseInt(Date.now()/1e3,10),nonce:"".random(8),ext:void 0},options);HMAC.valid_credentials(config.credentials),config.credentials.alg=config.credentials.alg.toUpperCase(),config.credentials.alg in HMAC.supported_algorithms||(config.credentials.alg=HMAC.default_algorithm),!1!==config.payload_verification&&void 0===config.payload&&(config.payload=btoa(config.body));const cryptoKey=await crypto.subtle.importKey("raw",utf8Bytes(config.credentials.key),{name:"HMAC",hash:config.credentials.alg},!0,["sign"]),canonical_string=HMAC.canonical_string(config),encoded=utf8Bytes(canonical_string),hmac=await crypto.subtle.sign("HMAC",cryptoKey,encoded);return[...new Uint8Array(hmac)].map((b=>b.toString(16).padStart(2,"0"))).join("")},canonical_string:options=>{let normalized=options.timestamp+"\n"+options.nonce+"\n"+options.method.toUpperCase()+"\n"+options.uri+"\n"+options.host.toLowerCase()+"\n"+options.port;return!1!==options.payload_verification&&(normalized+="\n"+options.payload),normalized}}),Fetch=Object.assign({get:async options=>{document.body.classList.add("loading");const config=Object.assign({target:"",headers:{}},options),url=`${app.appScheme}${app.appDomain}${config.target}`,json=await BaseApi.request(url,{mode:"same-origin",credentials:"same-origin",method:"GET",headers:Object.assign({},config.headers)});return document.body.classList.remove("loading"),json},post:async options=>{document.body.classList.add("loading");const config=Object.assign({target:void 0,body:void 0,headers:{"Content-Type":HMAC.default_content_type}},options),url=`${app.domainScheme}${app.domainName}${config.target}`,content=JSON.stringify(config.body);let json;return json=await BaseApi.request(url,{mode:"same-origin",credentials:"same-origin",method:"POST",body:content,headers:config.headers}),document.body.classList.remove("loading"),json.status&&json.action&&"retry"==json.status&&(content.recaptcha_token=await refresh_recaptcha_token(json.action),json=await BaseApi.request(url,{mode:"same-origin",credentials:"same-origin",method:"POST",body:content,headers:config.headers})),json}}),PublicApi=Object.assign({get:async options=>{document.body.classList.add("loading");const config=Object.assign({target:void 0,headers:{},sign:!0},options),url=`${app.apiScheme}${app.apiDomain}/${BaseApi.version}${config.target}`,transaction_id=await BaseApi.authorization_transaction(config.target);if("string"==typeof transaction_id){const authz_resp=await BaseApi.authorization(config.target,transaction_id);if(!authz_resp)return;if("string"==typeof authz_resp)config.headers["X-Authorization-Token"]=authz_resp;else if("object"==typeof authz_resp&&"status"in authz_resp&&"ok"!=authz_resp.message)return document.body.classList.remove("loading"),authz_resp}if(!1!==config.sign){if(!("apiKeyId"in app))return BaseApi.handle_debug("HMAC requires an apiKeyId"),toast("warning","This feature is not currently available","Sorry"),void document.body.classList.remove("loading");const apiKeySecret=localStorage.getItem("_apiKeySecret");config.headers.Authorization=await HMAC.header({credentials:{id:app.apiKeyId,key:apiKeySecret,alg:HMAC.default_algorithm},uri:`/${BaseApi.version}${config.target}`,method:"GET"})}const json=await BaseApi.request(url,{mode:"cors",credentials:"omit",method:"GET",headers:Object.assign({},config.headers)});return document.body.classList.remove("loading"),json},post:async options=>{document.body.classList.add("loading");const config=Object.assign({target:void 0,body:{},headers:{"Content-Type":HMAC.default_content_type},sign:!0},options),transaction_id=await BaseApi.authorization_transaction(config.target);if("string"==typeof transaction_id){const authz_resp=await BaseApi.authorization(config.target,transaction_id);if(!authz_resp)return;if("string"==typeof authz_resp)config.headers["X-Authorization-Token"]=authz_resp;else if("object"==typeof authz_resp&&"status"in authz_resp&&"ok"!=authz_resp.message)return document.body.classList.remove("loading"),authz_resp}const url=`${app.apiScheme}${app.apiDomain}/${BaseApi.version}${config.target}`,content=JSON.stringify(config.body),apiKeySecret=localStorage.getItem("_apiKeySecret");let json;if(!1!==config.sign){if(!("apiKeyId"in app))return BaseApi.handle_debug("HMAC requires an apiKeyId"),toast("warning","This feature is not currently available","Sorry"),void document.body.classList.remove("loading");config.headers.Authorization=await HMAC.header({credentials:{id:app.apiKeyId,key:apiKeySecret,alg:HMAC.default_algorithm},uri:`/${BaseApi.version}${config.target}`,body:content,method:"POST"})}return json=await BaseApi.request(url,{mode:"cors",credentials:"omit",method:"POST",body:content,headers:config.headers}),json.status&&json.action&&"retry"==json.status&&(content.recaptcha_token=await refresh_recaptcha_token(json.action),json=await BaseApi.request(url,{mode:"cors",credentials:"omit",method:"POST",body:content,headers:config.headers})),document.body.classList.remove("loading"),json}});