const BaseApi=Object.assign({version:"v1",handle_error:async error=>{toast("error",error)},handle_debug:async error=>{console.error(error)},request:async(url,options)=>{const response=await fetch(url,options).catch(BaseApi.handle_debug);if(!response||404===response.status)return{status:"warning",message:"The server is currently not available.<br>Please try again in a few moments"};if(401===response.status)return{status:"error",message:"Request was cancelled as being unauthorised"};if(200!==response.status)return console.log(response),{status:"info",message:"This feature is not currently available"};const json=await response.json();return json.error&&BaseApi.handle_debug(json.error),json},authorization:async target=>{const apiKeySecret=localStorage.getItem("_apiKeySecret"),endpoint_authz_body=JSON.stringify({target:target}),json=await BaseApi.request(`${app.apiScheme}${app.apiDomain}/${BaseApi.version}/endpoints/authorization`,{mode:"cors",credentials:"omit",method:"POST",body:endpoint_authz_body,headers:{Authorization:await HMAC.header({credentials:{id:app.apiKeyId,key:apiKeySecret,alg:HMAC.default_algorithm},uri:`/${BaseApi.version}/endpoints/authorization`,body:endpoint_authz_body,method:"POST"})}});if(!("transaction_id"in json)||"string"!=typeof json.transaction_id)return json;if(app.keys.length>=1){const allowCredentials=[];for await(const key of app.keys)allowCredentials.push({id:base64ToArrayBuffer(key.webauthn_id),type:"public-key",transports:["usb","ble","nfc","internal"]});const assertion=await navigator.credentials.get({publicKey:{challenge:HMAC.enc.encode(app.apiKeyId),rpId:app.domainName,userVerification:"discouraged",allowCredentials:allowCredentials,timeout:9e4}}).catch(BaseApi.handle_error);if(assertion){const response=assertion.response,authData=new Uint8Array(response.authenticatorData),clientDataJSON=new Uint8Array(response.clientDataJSON),rawId=new Uint8Array(assertion.rawId),sig=new Uint8Array(response.signature),assertionClientExtensions=assertion.getClientExtensionResults(),assertion_response={id:assertion.id,rawId:arrayBufferToBase64(rawId),type:assertion.type,authData:arrayBufferToBase64(authData),clientData:arrayBufferToBase64(clientDataJSON),signature:hexEncode(sig),assertionClientExtensions:JSON.stringify(assertionClientExtensions)},authz_body=JSON.stringify({assertion_response:assertion_response,target:target,transaction_id:json.transaction_id}),authz=await BaseApi.request(`${app.apiScheme}${app.apiDomain}/${BaseApi.version}/authorization`,{mode:"cors",credentials:"omit",method:"POST",body:authz_body,headers:{Authorization:await HMAC.header({credentials:{id:app.apiKeyId,key:apiKeySecret,alg:HMAC.default_algorithm},uri:`/${BaseApi.version}/authorization`,body:authz_body,method:"POST"})}});return"authorization_token"in authz&&"string"==typeof authz.authorization_token&&authz.authorization_token}}}}),HMAC=Object.assign({supported_algorithms:["SHA-256","SHA-384","SHA-512"],default_algorithm:"SHA-512",default_content_type:"application/json",default_port:443,default_method:"GET",enc:new TextEncoder,valid_credentials:credentials=>{if(!(credentials&&credentials.id&&credentials.key&&credentials.alg))throw new Error("Invalid credentials")},header:async options=>{const config=Object.assign({credentials:{},uri:void 0,body:"",method:HMAC.default_method,host:app.apiDomain,port:HMAC.default_port,payload_verification:!0,payload:void 0,timestamp:parseInt(Date.now()/1e3,10),nonce:"".random(8)},options);HMAC.valid_credentials(config.credentials),!1!==config.payload_verification&&(config.payload=btoa(config.body));const mac=await HMAC.sign(config);return'HMAC id="'+config.credentials.id+'", ts="'+config.timestamp+'", nonce="'+config.nonce+'", mac="'+mac+'"'},sign:async options=>{const config=Object.assign({credentials:{},uri:void 0,body:"",method:HMAC.default_method,host:app.apiDomain,port:HMAC.default_port,payload_verification:!0,payload:void 0,timestamp:parseInt(Date.now()/1e3,10),nonce:"".random(8),ext:void 0},options);HMAC.valid_credentials(config.credentials),config.credentials.alg=config.credentials.alg.toUpperCase(),config.credentials.alg in HMAC.supported_algorithms||(config.credentials.alg=HMAC.default_algorithm),!1!==config.payload_verification&&void 0===config.payload&&(config.payload=btoa(config.body));const cryptoKey=await crypto.subtle.importKey("raw",utf8Bytes(config.credentials.key),{name:"HMAC",hash:config.credentials.alg},!0,["sign"]),canonical_string=HMAC.canonical_string(config),encoded=utf8Bytes(canonical_string),hmac=await crypto.subtle.sign("HMAC",cryptoKey,encoded);return[...new Uint8Array(hmac)].map((b=>b.toString(16).padStart(2,"0"))).join("")},canonical_string:options=>{let normalized=options.timestamp+"\n"+options.nonce+"\n"+options.method.toUpperCase()+"\n"+options.uri+"\n"+options.host.toLowerCase()+"\n"+options.port;return!1!==options.payload_verification&&(normalized+="\n"+options.payload),normalized}}),Fetch=Object.assign({get:async options=>{document.body.classList.add("loading");const config=Object.assign({target:"",headers:{}},options),url=`${app.appScheme}${app.appDomain}${config.target}`,json=await BaseApi.request(url,{mode:"same-origin",credentials:"same-origin",method:"GET",headers:Object.assign({},config.headers)});return document.body.classList.remove("loading"),json},post:async options=>{document.body.classList.add("loading");const config=Object.assign({target:void 0,body:void 0,headers:{"Content-Type":HMAC.default_content_type}},options),url=`${app.domainScheme}${app.domainName}${config.target}`,content=JSON.stringify(config.body);let json;return json=await BaseApi.request(url,{mode:"same-origin",credentials:"same-origin",method:"POST",body:content,headers:config.headers}),document.body.classList.remove("loading"),json.status&&json.action&&"retry"==json.status&&(content.recaptcha_token=await refresh_recaptcha_token(json.action),json=await BaseApi.request(url,{mode:"same-origin",credentials:"same-origin",method:"POST",body:content,headers:config.headers})),json}}),PublicApi=Object.assign({get:async options=>{document.body.classList.add("loading");const config=Object.assign({target:void 0,headers:{},sign:!0},options),url=`${app.apiScheme}${app.apiDomain}/${BaseApi.version}${config.target}`;let authorization_token;const authz_resp=await BaseApi.authorization(config.target);if("string"==typeof authz_resp)authorization_token=authz_resp,config.headers["X-Authorization-Token"]=authorization_token;else if("object"==typeof authz_resp&&"status"in authz_resp&&"ok"!=authz_resp.message)return document.body.classList.remove("loading"),authz_resp;if(!1!==config.sign){if(!("apiKeyId"in app))return BaseApi.handle_debug("HMAC requires an apiKeyId"),toast("warning","This feature is not currently available","Sorry"),void document.body.classList.remove("loading");const apiKeySecret=localStorage.getItem("_apiKeySecret");config.headers.Authorization=await HMAC.header({credentials:{id:app.apiKeyId,key:apiKeySecret,alg:HMAC.default_algorithm},uri:`/${BaseApi.version}${config.target}`,method:"GET"})}const json=await BaseApi.request(url,{mode:"cors",credentials:"omit",method:"GET",headers:Object.assign({},config.headers)});return document.body.classList.remove("loading"),json},post:async options=>{document.body.classList.add("loading");const config=Object.assign({target:void 0,body:{},headers:{"Content-Type":HMAC.default_content_type},sign:!0},options);let authorization_token;const authz_resp=await BaseApi.authorization(config.target);if("string"==typeof authz_resp)authorization_token=authz_resp,config.headers["X-Authorization-Token"]=authorization_token;else if("object"==typeof authz_resp&&"status"in authz_resp&&"ok"!=authz_resp.message)return document.body.classList.remove("loading"),authz_resp;const url=`${app.apiScheme}${app.apiDomain}/${BaseApi.version}${config.target}`,content=JSON.stringify(config.body),apiKeySecret=localStorage.getItem("_apiKeySecret");let json;if(!1!==config.sign){if(!("apiKeyId"in app))return BaseApi.handle_debug("HMAC requires an apiKeyId"),toast("warning","This feature is not currently available","Sorry"),void document.body.classList.remove("loading");config.headers.Authorization=await HMAC.header({credentials:{id:app.apiKeyId,key:apiKeySecret,alg:HMAC.default_algorithm},uri:`/${BaseApi.version}${config.target}`,body:content,method:"POST"})}return json=await BaseApi.request(url,{mode:"cors",credentials:"omit",method:"POST",body:content,headers:config.headers}),json.status&&json.action&&"retry"==json.status&&(content.recaptcha_token=await refresh_recaptcha_token(json.action),json=await BaseApi.request(url,{mode:"cors",credentials:"omit",method:"POST",body:content,headers:config.headers})),document.body.classList.remove("loading"),json}});