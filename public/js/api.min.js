const BaseApi=Object.assign({},{version:"v1",_do_request:async(url,options)=>(await fetch(url,options).catch((err=>{console.error(err)}))).json()}),Hawk=Object.assign({},{version:1,supported_algorithms:["SHA1","SHA256"],default_algorithm:"SHA256",default_content_type:"application/json",default_port:443,default_method:"GET",enc:new TextEncoder,valid_credentials:credentials=>{if(!(credentials&&credentials.id&&credentials.key&&credentials.algorithm))throw new Error("Invalid credentials")},hash_payload:(contentType,payload,algorithm)=>{(algorithm=algorithm.toUpperCase())in Hawk.supported_algorithms||(algorithm=Hawk.default_algorithm);const hash=CryptoJS.algo[algorithm].create();return contentType=contentType.split(";")[0].replace(/^\s+|\s+$/g,"").toLowerCase(),hash.update("hawk."+Hawk.version+".payload\n"),hash.update(contentType+"\n"),hash.update(payload),hash.update("\n"),hash.finalize().toString(CryptoJS.enc.Base64)},header:options=>{const config=Object.assign({credentials:{},uri:void 0,body:"",method:Hawk.default_method,host:app.apiDomain,port:Hawk.default_port,contentType:Hawk.default_content_type,payload_verification:!0,hash:void 0,timestamp:Date.now()/1e3,nonce:"".random(8),ext:void 0},options);Hawk.valid_credentials(config.credentials),config.payload_verification&&!config.hash&&(config.hash=Hawk.hash_payload(config.contentType,config.body,config.credentials.alg));const mac=Hawk.sign(options);return'Hawk id="'+config.credentials.id+'", ts="'+config.timestamp+'", nonce="'+config.nonce+(config.hash?'", hash="'+config.hash:"")+(config.ext?'", ext="'+config.ext:"")+'", mac="'+mac+'"'},sign:options=>{const config=Object.assign({credentials:{},uri:void 0,body:"",method:Hawk.default_method,host:app.apiDomain,port:Hawk.default_port,contentType:Hawk.default_content_type,payload_verification:!0,hash:void 0,timestamp:Date.now()/1e3,nonce:"".random(8),ext:void 0},options);Hawk.valid_credentials(config.credentials),config.credentials.alg=config.credentials.alg.toUpperCase(),config.credentials.alg in Hawk.supported_algorithms||(config.credentials.alg=Hawk.default_algorithm),config.payload_verification&&!config.hash&&(config.hash=Hawk.hash_payload(config.contentType,config.body,config.credentials.alg));const normalized=Hawk.normalized_header(config);return CryptoJS["Hmac"+config.credentials.alg](Hawk.enc.encode(normalized),config.credentials.key).toString(CryptoJS.enc.Base64)},normalized_header:options=>{let normalized=`hawk.${Hawk.version}.header\n`+options.timestamp+"\n"+options.nonce+"\n"+options.method.toUpperCase()+"\n"+options.uri+"\n"+options.host.toLowerCase()+"\n"+options.port+"\n"+(options.hash||"")+"\n";return options.ext&&(normalized+=options.ext.replace(/\\/g,"\\\\").replace(/\n/g,"\\n")),normalized+="\n",normalized}}),PublicApi=Object.assign(BaseApi,{get:async options=>{document.body.classList.add("loading");const config=Object.assign({target:target,headers:headers,hawk:!0},options),url=`${app.apiScheme}${app.apiDomain}/${BaseApi.version}${config.target}`;if(config.hawk){let apiKeySecret;if(!("apiKeyId"in app))return void console.error("Hawk requires an apiKeyId");if(!("apiKeyId"in app)&&(apiKeySecret=localStorage.getItem("_apiKeySecret"),!apiKeySecret))return void console.error("Hawk requires an apiKeySecret");config.headers.Authorization=Hawk.header({credentials:{id:app.apiKeyId,key:apiKeySecret,alg:Hawk.default_algorithm},uri:`/${BaseApi.version}${config.target}`,method:"GET",contentType:config.headers["Content-Type"]})}const json=await BaseApi._do_request(url,{mode:"cors",credentials:"omit",method:"GET",headers:Object.assign({},config.headers)});return document.body.classList.remove("loading"),json.error&&console.error(json.error),json},post:async options=>{document.body.classList.add("loading");const config=Object.assign({target:void 0,body:void 0,headers:{"Content-Type":Hawk.default_content_type},hawk:!0},options),url=`${app.apiScheme}${app.apiDomain}/${BaseApi.version}${config.target}`,content=JSON.stringify(config.body);let json;if(config.hawk){let apiKeySecret;if(!("apiKeyId"in app))return void console.error("Hawk requires an apiKeyId");if(!("apiKeyId"in app)&&(apiKeySecret=localStorage.getItem("_apiKeySecret"),!apiKeySecret))return void console.error("Hawk requires an apiKeySecret");config.headers.Authorization=Hawk.header({credentials:{id:app.apiKeyId,key:apiKeySecret,alg:Hawk.default_algorithm},uri:`/${BaseApi.version}${config.target}`,body:content,method:"POST",contentType:config.headers["Content-Type"]})}return json=await BaseApi._do_request(url,{mode:"cors",credentials:"omit",method:"POST",body:content,headers:config.headers}),document.body.classList.remove("loading"),json.status&&json.action&&"retry"==json.status&&(content.recaptcha_token=await refresh_recaptcha_token(json.action),json=await BaseApi._do_request(url,{mode:"cors",credentials:"omit",method:"POST",body:content,headers:config.headers})),json.error&&console.error(json.error),json}}),Api=Object.assign(BaseApi,{get:async options=>{document.body.classList.add("loading");const config=Object.assign({target:target,headers:headers},options),url=`${app.appScheme}${app.appDomain}${config.target}`,json=await BaseApi._do_request(url,{mode:"same-origin",credentials:"same-origin",method:"GET",headers:Object.assign({},config.headers)});return document.body.classList.remove("loading"),json.error&&console.error(json.error),json},post:async options=>{document.body.classList.add("loading");const config=Object.assign({target:void 0,body:void 0,headers:{"Content-Type":Hawk.default_content_type}},options),url=`${app.domainScheme}${app.domainName}${config.target}`,content=JSON.stringify(config.body);let json;return json=await BaseApi._do_request(url,{mode:"same-origin",credentials:"same-origin",method:"POST",body:content,headers:config.headers}),document.body.classList.remove("loading"),json.status&&json.action&&"retry"==json.status&&(content.recaptcha_token=await refresh_recaptcha_token(json.action),json=await BaseApi._do_request(url,{mode:"same-origin",credentials:"same-origin",method:"POST",body:content,headers:config.headers})),json.error&&console.error(json.error),json}});