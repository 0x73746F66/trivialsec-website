const init_services=async()=>{socket.on("update_service_state",update_service_state),setTimeout(check_offline,1e4)},update_service_state=data=>{if(!("service"in data))return console.log(data),void toast("warning","This feature is not currently available","Sorry");const el=document.querySelector(`[data-category="${data.service}"] .service-status`);el.classList.remove("service-status-connecting"),el.classList.remove("service-status-offline"),el.classList.remove("service-status-idle"),el.classList.remove("service-status-active"),"idle"==data.state&&(el.classList.add("service-status-idle"),el.textContent="Idle"),"starting"!=data.state&&"processing"!=data.state||(el.classList.add("service-status-active"),el.textContent="Active"),"abort"!=data.state&&"error"!=data.state||(el.classList.add("service-status-offline"),el.textContent="Offline");const category_el=document.querySelector(`[data-category="${data.service}"]`);category_el.querySelector(".nodes span").textContent=data.nodes,category_el.querySelector(".queued span").textContent=data.queued_jobs,category_el.querySelector(".running span").textContent=data.running_jobs,category_el.querySelector(".errors span").textContent=data.errored_jobs,category_el.querySelector(".last-event span").textContent=data.last_event,category_el.querySelector(".timestamp span").innerHTML=`<time datetime="${convertDateToUTC(new Date).toISOString()}" title="${(new Date).toLocaleString(app.lang)}"></time>`},check_offline=async()=>{for await(const el of document.querySelectorAll(".service-status-connecting"))el.classList.remove("service-status-connecting"),el.classList.add("service-status-offline"),el.textContent="Offline"};document.addEventListener("DOMContentLoaded",init_services,!1);